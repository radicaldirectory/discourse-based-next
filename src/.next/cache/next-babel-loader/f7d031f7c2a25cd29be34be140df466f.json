{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport Layout from \"@components/Layout\";\nimport TopicContent from \"@components/TopicContent\";\nimport { getCategories } from \"@api/categories\";\nimport { getTopic } from \"@api/t/[topicID]\";\nimport { getAllTopicIDS } from \"@api/docs\"; // import useSWR from \"swr\";\n// import { fetcher } from \"@lib/utils\";\n\nfunction Topic({\n  categories,\n  topic\n}) {\n  const router = useRouter(); // const result = useSWR(`/api/t/${router.query.id}`, fetcher);\n\n  if (!categories) {\n    return __jsx(\"div\", null, \"Loading...\");\n  } // console.log(categories);\n\n\n  return __jsx(Layout, {\n    categories: categories\n  }, __jsx(React.Fragment, null, __jsx(\"hr\", null), router.isFallback ? __jsx(\"div\", null, \"Loading...\") : __jsx(TopicContent, {\n    topic: topic\n  })));\n}\n\nexport async function getStaticPaths() {\n  //const idsArray = await getAllTopicIDS();\n  const idsStatic = [// \"128\",\n  // \"54\",\n  // \"127\",\n  // \"126\",\n  // \"125\",\n  // \"123\",\n  // \"120\",\n  // \"119\",\n  // \"118\",\n  \"117\", \"116\", \"113\", \"114\", \"112\", \"110\", \"109\", \"108\", \"107\", \"106\", \"105\", \"101\", \"104\", \"103\", \"102\", \"100\" // \"99\",\n  // \"98\",\n  // \"97\",\n  // \"96\",\n  // \"95\",\n  // \"31\",\n  // \"81\",\n  // \"92\",\n  // \"84\",\n  // \"42\",\n  // \"56\",\n  // \"38\",\n  // \"29\",\n  // \"35\",\n  // \"59\",\n  // \"28\",\n  // \"46\",\n  // \"34\",\n  // \"23\",\n  // \"57\",\n  // \"33\",\n  // \"32\",\n  // \"36\",\n  // \"27\",\n  // \"25\",\n  // \"20\",\n  // \"58\",\n  // \"61\",\n  // \"60\",\n  // \"68\",\n  // \"52\",\n  // \"55\",\n  // \"53\",\n  // \"51\",\n  // \"50\",\n  // \"49\",\n  // \"48\",\n  // \"47\",\n  // \"45\",\n  // \"44\",\n  // \"43\",\n  // \"41\",\n  // \"40\",\n  // \"39\",\n  // \"30\",\n  // \"26\",\n  ];\n  const allPaths = idsStatic.map(topicID => ({\n    params: {\n      id: topicID\n    }\n  }));\n  return {\n    paths: allPaths,\n    fallback: false //set to true if not doing SSG\n\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const categories = await getCategories();\n  const topic = await getTopic(params.id); // console.log(params.id);\n\n  return {\n    props: {\n      categories,\n      topic\n    }\n  };\n}\nexport default Topic;","map":null,"metadata":{},"sourceType":"module"}
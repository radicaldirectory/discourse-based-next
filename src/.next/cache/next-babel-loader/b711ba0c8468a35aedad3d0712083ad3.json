{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Axios from \"axios\";\nimport QueryString from \"querystring\"; // This API route handles a 'search', 'tags' and 'page'\n\n/* Discourse does not accept multiple seperate query string values for the same key.\ni.e. tags=prison&tags=abolition will not return a result with both filters applied, only one of them.\nqueryConcatenator takes an array of queries and concatenates them in the format Discourse expects */\n\nfunction queryConcatenator(queries) {\n  if (!queries) return null;\n\n  if (Array.isArray(queries)) {\n    return queries.join(\"|\");\n  } else {\n    return queries;\n  }\n}\n\nexport function getDocs(_x) {\n  return _getDocs.apply(this, arguments);\n}\n\nfunction _getDocs() {\n  _getDocs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req) {\n    var docsPath, fullQueries, config, docs;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            docsPath = new URL(\"/docs.json\", \"https://radical.directory/\");\n\n            if (req) {\n              fullQueries = QueryString.stringify({\n                search: req.query.search,\n                tags: queryConcatenator(req.query.tags),\n                page: req.query.page\n              });\n              docsPath.search = fullQueries;\n            }\n\n            config = {\n              method: \"get\",\n              url: docsPath.href,\n              headers: {\n                Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n              }\n            };\n            _context2.next = 5;\n            return Axios(config).then(function (response) {\n              // the API returns all this random data. this just returns the important stuff\n              docs = {\n                categories: response.data.categories,\n                tags: response.data.tags,\n                topics: response.data.topics.topic_list.topics.map(function (topic) {\n                  return {\n                    id: topic.id,\n                    title: topic.title,\n                    slug: topic.slug,\n                    tags: topic.tags,\n                    category_id: topic.category_id\n                  };\n                })\n              };\n            })[\"catch\"](function (error) {\n              console.log(error);\n            });\n\n          case 5:\n            return _context2.abrupt(\"return\", docs);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getDocs.apply(this, arguments);\n}\n\nexport function getAllTopicIDS() {\n  return _getAllTopicIDS.apply(this, arguments);\n}\n\nfunction _getAllTopicIDS() {\n  _getAllTopicIDS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var pageLimit, idArray, i, results, newIDs;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            pageLimit = 5;\n            idArray = [];\n            i = 0;\n\n          case 3:\n            if (!(i < pageLimit)) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 6;\n            return getDocs({\n              query: {\n                page: i\n              }\n            });\n\n          case 6:\n            results = _context3.sent;\n            newIDs = idArray.concat(results.topics.map(function (topic) {\n              return \"\".concat(topic.id);\n            }));\n            idArray = newIDs;\n\n          case 9:\n            i++;\n            _context3.next = 3;\n            break;\n\n          case 12:\n            console.log(idArray);\n            return _context3.abrupt(\"return\", idArray);\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getAllTopicIDS.apply(this, arguments);\n}\n\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var gotDocs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getDocs(req);\n\n          case 2:\n            gotDocs = _context.sent;\n            getAllTopicIDS();\n            return _context.abrupt(\"return\", res.status(200).json({\n              gotDocs: gotDocs\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}
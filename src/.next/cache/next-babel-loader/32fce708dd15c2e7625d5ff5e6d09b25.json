{"ast":null,"code":"import Axios from \"axios\";\nimport QueryString from \"querystring\"; // This API route handles a 'search', 'tags' and 'page'\n\n/* Discourse does not accept multiple seperate query string values for the same key.\ni.e. tags=prison&tags=abolition will not return a result with both filters applied, only one of them.\nqueryConcatenator takes an array of queries and concatenates them in the format Discourse expects */\n\nfunction queryConcatenator(queries) {\n  if (!queries) return null;\n\n  if (Array.isArray(queries)) {\n    return queries.join(\"|\");\n  } else {\n    return queries;\n  }\n}\n\nexport async function getDocs(req) {\n  const docsPath = new URL(\"/docs.json\", \"https://radical.directory/\");\n\n  if (req) {\n    const fullQueries = QueryString.stringify({\n      search: req.query.search,\n      tags: queryConcatenator(req.query.tags),\n      page: req.query.page\n    });\n    docsPath.search = fullQueries;\n  }\n\n  let config = {\n    method: \"get\",\n    url: docsPath.href,\n    headers: {\n      Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n    }\n  };\n  let docs;\n  await Axios(config).then(response => {\n    // the API returns all this random data. this just returns the important stuff\n    docs = {\n      categories: response.data.categories,\n      tags: response.data.tags,\n      topics: response.data.topics.topic_list.topics.map(topic => {\n        return {\n          id: topic.id,\n          title: topic.title,\n          slug: topic.slug,\n          tags: topic.tags,\n          category_id: topic.category_id\n        };\n      })\n    };\n  }).catch(error => {\n    console.log(error);\n  });\n  return docs;\n}\nexport async function getAllTopicIDS() {\n  let pageLimit = 5;\n  let idArray = [];\n\n  for (let i = 0; i < pageLimit; i++) {\n    let results = await getDocs({\n      query: {\n        page: i\n      }\n    });\n    let newIDs = idArray.concat(results.topics.map(topic => `${topic.id}`));\n    idArray = newIDs;\n  }\n\n  return idArray;\n}\nexport default (async (req, res) => {\n  const gotDocs = await getDocs(req);\n  getAllTopicIDS();\n  return res.status(200).json({\n    gotDocs\n  });\n});","map":null,"metadata":{},"sourceType":"module"}
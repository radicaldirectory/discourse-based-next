{"ast":null,"code":"import Axios from \"axios\";\nimport QueryString from \"querystring\"; // This API route handles a 'search', 'tags' and 'page'\n\n/* Discourse does not accept multiple seperate query string values for the same key.\ni.e. tags=prison&tags=abolition will not return a result with both filters applied, only one of them.\nqueryConcatenator takes an array of queries and concatenates them in the format Discourse expects */\n\nfunction queryConcatenator(queries) {\n  if (!queries) return null;\n\n  if (Array.isArray(queries)) {\n    return queries.join(\"|\");\n  } else {\n    return queries;\n  }\n}\n\nexport async function getDocs(req) {\n  const docsPath = new URL(\"/docs.json\", \"https://radical.directory/\");\n\n  if (req) {\n    const fullQueries = QueryString.stringify({\n      search: req.query.search,\n      tags: queryConcatenator(req.query.tags),\n      page: req.query.page\n    });\n    docsPath.search = fullQueries;\n  }\n\n  let config = {\n    method: \"get\",\n    url: docsPath.href,\n    headers: {\n      Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n    }\n  };\n  let docs;\n  await Axios(config).then(response => {\n    // the API returns all this random data. this just returns the important stuff\n    docs = {\n      categories: response.data.categories,\n      tags: response.data.tags,\n      topics: response.data.topics.topic_list.topics.map(topic => {\n        return {\n          id: topic.id,\n          title: topic.title,\n          slug: topic.slug,\n          tags: topic.tags,\n          category_id: topic.category_id\n        };\n      })\n    };\n  }).catch(error => {\n    console.log(error);\n  });\n  return docs;\n}\nexport async function getAllTopicIDS() {\n  let pageLimit = 5;\n  let idArray = [];\n\n  for (let i = 0; i < pageLimit; i++) {\n    let results = await getDocs({\n      query: {\n        page: i\n      }\n    });\n    let newIDs = idArray.concat(results.topics.map(topic => `${topic.id}`));\n    idArray = newIDs;\n  }\n\n  return idArray;\n}\nexport default (async (req, res) => {\n  const gotDocs = await getDocs(req);\n  getAllTopicIDS();\n  return res.status(200).json({\n    gotDocs\n  });\n});","map":{"version":3,"sources":["/Users/Jai/radical-directory/radicaldirectory.github.io/src/pages/api/docs.js"],"names":["Axios","QueryString","queryConcatenator","queries","Array","isArray","join","getDocs","req","docsPath","URL","fullQueries","stringify","search","query","tags","page","config","method","url","href","headers","Accept","docs","then","response","categories","data","topics","topic_list","map","topic","id","title","slug","category_id","catch","error","console","log","getAllTopicIDS","pageLimit","idArray","i","results","newIDs","concat","res","gotDocs","status","json"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport QueryString from \"querystring\";\n\n// This API route handles a 'search', 'tags' and 'page'\n\n/* Discourse does not accept multiple seperate query string values for the same key.\ni.e. tags=prison&tags=abolition will not return a result with both filters applied, only one of them.\nqueryConcatenator takes an array of queries and concatenates them in the format Discourse expects */\n\nfunction queryConcatenator(queries) {\n  if (!queries) return null;\n  if (Array.isArray(queries)) {\n    return queries.join(\"|\");\n  } else {\n    return queries;\n  }\n}\n\nexport async function getDocs(req) {\n  const docsPath = new URL(\"/docs.json\", \"https://radical.directory/\");\n  if (req) {\n    const fullQueries = QueryString.stringify({\n      search: req.query.search,\n      tags: queryConcatenator(req.query.tags),\n      page: req.query.page,\n    });\n    docsPath.search = fullQueries;\n  }\n\n  let config = {\n    method: \"get\",\n    url: docsPath.href,\n    headers: {\n      Accept:\n        \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n    },\n  };\n\n  let docs;\n\n  await Axios(config)\n    .then((response) => {\n      // the API returns all this random data. this just returns the important stuff\n      docs = {\n        categories: response.data.categories,\n        tags: response.data.tags,\n        topics: response.data.topics.topic_list.topics.map((topic) => {\n          return {\n            id: topic.id,\n            title: topic.title,\n            slug: topic.slug,\n            tags: topic.tags,\n            category_id: topic.category_id,\n          };\n        }),\n      };\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return docs;\n}\n\nexport async function getAllTopicIDS() {\n  let pageLimit = 5;\n  let idArray = [];\n  for (let i = 0; i < pageLimit; i++) {\n    let results = await getDocs({ query: { page: i } });\n    let newIDs = idArray.concat(results.topics.map((topic) => `${topic.id}`));\n    idArray = newIDs;\n  }\n  return idArray;\n}\n\nexport default async (req, res) => {\n  const gotDocs = await getDocs(req);\n\n  getAllTopicIDS();\n\n  return res.status(200).json({\n    gotDocs,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
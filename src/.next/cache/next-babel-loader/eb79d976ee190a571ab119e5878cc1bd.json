{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n//Hooks\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\"; //API call functions\n\nimport { getCategories } from \"@api/categories\";\nimport { getDocs } from \"@api/docs\"; //Components\n\nimport Layout from \"@components/Layout\";\nimport TagList from \"@components/TagList\";\nimport TopicList from \"@components/TopicList\"; //Utils\n\nimport { fetcher, forceArray, queryStringify, queryStringify2 } from \"@lib/utils\"; //Static Gen Data Fetch\n\nexport async function getStaticProps() {\n  const categories = await getCategories();\n  const docs = await getDocs();\n  return {\n    props: {\n      categories,\n      docs\n    }\n  };\n} // TODO filter by category, search queries\n\nexport default function IndexPage({\n  categories,\n  docs\n}) {\n  const router = useRouter();\n  const {\n    0: optionTags,\n    1: setOptionTags\n  } = useState([]);\n  const {\n    0: topicsResults,\n    1: setTopicsResults\n  } = useState([]);\n  const {\n    0: topicsPage,\n    1: setTopicsPage\n  } = useState(0); // const docsRoute = new URL(\"/api/docs\", \"https://x.x\");\n  // const result = useSWR(docsRoute, fetcher);\n\n  const result = useSWR(`/api/docs?${queryStringify2(\"\", router.query.tags, topicsPage)}`, fetcher); // console.log(\"router.query.tags =\");\n  // console.log(router.query.tags);\n  //initial load static-fetched data into state\n\n  useEffect(() => {\n    setOptionTags(docs.tags);\n    setTopicsResults(docs.topics);\n  }, []); //pass client-fetched updated data into state\n\n  useEffect(() => {\n    if (!result.data) return;\n    setOptionTags(result.data.gotDocs.tags);\n    setTopicsResults(result.data.gotDocs.topics);\n  }, [result.data]); //Tag click event handler\n\n  const onToggleTags = tag => {\n    let oldTags = forceArray(router.query.tags);\n    let newTags = oldTags.includes(tag) ? oldTags.filter(i => i !== tag) : [...oldTags, tag];\n    router.push(\"?\" + queryStringify2(\"\", newTags, topicsPage), undefined, {\n      shallow: true\n    }); //console.log(queryStringify2(\"search\", newTags, \"page\"));\n  };\n\n  return __jsx(Layout, {\n    categories: categories\n  }, __jsx(TagList, {\n    optionTags: optionTags,\n    queryTags: router.query.tags,\n    onToggleTags: onToggleTags\n  }), __jsx(TopicList, {\n    topics: topicsResults\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}